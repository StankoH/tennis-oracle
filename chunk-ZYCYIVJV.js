import{a}from"./chunk-M6G75PQQ.js";import{Y as i,ba as n,i as o}from"./chunk-GPF5BPB6.js";var l=class s{constructor(t){this.http=t}loggedIn=new o(this.hasToken());apiUrl="http://localhost:5000/api/auth";authStatus$=this.loggedIn.asObservable();hasToken(){return!!localStorage.getItem("token")}isLoggedIn(){return this.loggedIn.value}setAuthState(t){console.log("\u2705 setAuthState pozvan s:",t),this.loggedIn.next(t)}login(t){let e={identifier:t.identifier,password:t.password};return this.http.post("/api/auth/login",e)}loginWithGoogle(){window.location.href="http://localhost:5000/api/auth/google"}loginWithFacebook(){window.location.href="http://localhost:5000/api/auth/facebook"}resendVerification(t){return this.http.post("/api/auth/resend-verification",{email:t})}contactUs(t){return this.http.post("/api/auth/contact",t)}currentUser=new o(this.getUserFromStorage());user$=this.currentUser.asObservable();getUserFromStorage(){let t=localStorage.getItem("user");return t?JSON.parse(t):null}setUser(t){localStorage.setItem("user",JSON.stringify(t)),this.currentUser.next(t)}getUser(){let t=localStorage.getItem("user");return t?JSON.parse(t):null}logout(){localStorage.removeItem("token"),localStorage.removeItem("user"),this.loggedIn.next(!1),this.currentUser.next(null)}updateUser(t){let r={Authorization:`Bearer ${localStorage.getItem("token")}`};return this.http.post(`${this.apiUrl}/update`,t,{headers:r})}initAuth(){let t=localStorage.getItem("token"),e=localStorage.getItem("user");t&&!e&&(localStorage.removeItem("token"),this.loggedIn.next(!1));let r=!!t;this.loggedIn.next(r),this.currentUser.next(e?JSON.parse(e):null),console.log("\u{1F504} initAuth:",r)}resendVerificationEmail(t){return this.http.post(`${this.apiUrl}/resend-verification`,{email:t})}verifyEmail(t){return this.http.post(`${this.apiUrl}/verify-email`,{token:t})}sendResetPasswordEmail(t){return alert(`${this.apiUrl}/request-reset-password`),this.http.post(`${this.apiUrl}/request-reset-password`,{email:t})}resetPassword(t,e,r){return this.http.post(`${this.apiUrl}/reset-password`,{token:t,email:e,password:r})}checkNicknameExists(t){return this.http.get(`${this.apiUrl}/nickname-exists/${t}`)}static \u0275fac=function(e){return new(e||s)(n(a))};static \u0275prov=i({token:s,factory:s.\u0275fac,providedIn:"root"})};export{l as a};
